# -*- coding: utf-8 -*-

"""
/***************************************************************************
 RtMunsellRgb
                                 A QGIS plugin
 This plugin converts Munsell color system code into RBG value.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-04-14
        copyright            : (C) 2022 by Matjaž Mori
        email                : matjaz.mori@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Matjaž Mori'
__date__ = '2022-04-14'
__copyright__ = '(C) 2022 by Matjaž Mori'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QVariant

from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFeatureSink,
                       QgsProject,
                       QgsField,
                    
                       )


import os
import subprocess
import re
try:
    import colour
except:
    subprocess.check_call(['python', '-m', 'pip', 'install', 'colour-science'])
    colour



class RtMunsellRgbAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.INPUT,
                self.tr('Input layer'),
                [QgsProcessing.TypeVector]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterField(
                'field', 
                'Field with Munsell or RGB code to convert', 
                type=QgsProcessingParameterField.String, 
                parentLayerParameterName=self.INPUT, 
                allowMultiple=False, 
                defaultValue=None
            )
        )





    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
          
        layer_id = parameters[self.INPUT]  
        input_field = parameters['field']
        layer = QgsProject.instance().mapLayer(layer_id)




        def munsell2rgb(input_value):
            feedback.pushInfo(self.tr('Converting munsell to RGB'))
            feedback.pushInfo(self.tr(feature.id())
            field_name = input_field + '_to rgb'
            if field_name not in [field.name() for field in layer.fields()]:
                new_field = QgsField(field_name, QVariant.String) 
                layer.dataProvider().addAttributes([new_field])
                layer.updateFields()
            converted_code = feature.id()
            field_idx = layer.fields().indexOf(field_name)
            layer.dataProvider().changeAttributeValue(feature.id(), field_idx, converted_code)



        def rgb2munsell(input_value):
            feedback.pushInfo(self.tr('Converting RGB to Munsell:'))
            feedback.pushInfo(self.tr(feature.id())
            field_name = input_field + '_to munsell'
            if field_name not in [field.name() for field in layer.fields()]:
                new_field = QgsField(field_name, QVariant.String) 
                layer.dataProvider().addAttributes([new_field])
                layer.updateFields()
            converted_code = feature.id()
            field_idx = layer.fields().indexOf(field_name)
            layer.dataProvider().changeAttributeValue(feature.id(), field_idx, converted_code)
        

        for feature in layer.getFeatures():
            input_value = feature[input_field]
            # create a list of code parts
            input_value = re.split(r'(\d+(\.\d+)?)', input_value)
            # Filter to keep only numeric or alphabetic elements
            filtered_input = [item.strip() for item in input_value if item is not None and (item.replace('.', '', 1).isdigit() or item.strip().isalpha())]

            #is it RGB
            if all(elem.replace('.', '', 1).isdigit() for elem in filtered_input) and len(filtered_input) == 3:
                rgb2munsell(filtered_input)

            #is it munsell
            elif len(filtered_input) == 4 and filtered_input[0].replace('.', '', 1).isdigit() and \
                filtered_input[1].isalpha() and filtered_input[2].isdigit() and filtered_input[3].isdigit():
                munsell2rgb(filtered_input)

            else: 
                feedback.pushInfo(self.tr('No valid RGB or Munsell code detected:'))
                feedback.pushInfo(self.tr(feature.id())


   


            
        """
        layer.startEditing()

        # Step 2: Start Editing the Layer
        layer.startEditing()

        # Step 3: Add the New Field
        layer.dataProvider().addAttributes([QgsField(new_field_name, QVariant.Int)])
        layer.updateFields()

        # Step 4: Calculate and Update Values
        for feature in layer.getFeatures():
            source_value = feature[source_field_name]
            new_value = source_value * 3
            layer.changeAttributeValue(feature.id(), layer.fields().indexOf(new_field_name), new_value)

        # Step 5: Commit Changes
        layer.commitChanges()





        for feature in layer.getFeatures():
            muns = feature[4]
            if muns != NULL and muns != '':
                muns = re.sub(r"[\n\t\s]*", "", muns)
                match = re.split(r'(\d+)', muns)
                print(match)
                
                if len(match) == 9:
                    hue = float(match[1] + '.' + match[3])
                    pref = match[4]
                    value = float(match[5])
                    chroma = float(match[7])
        
                else:
                    hue = float(match[1])
                    pref = match[2]
                    value = float(match[3])
                    chroma = float(match[5])
                    
                muns_input = str(hue) + pref + ' ' + str(value) + '/' + str(chroma)
                print(muns_input)

                x = colour.munsell_colour_to_xyY(muns_input)
                C = colour.ILLUMINANTS['CIE 1931 2 Degree Standard Observer']['C']
                x = colour.xyY_to_XYZ(x)
                rgb = colour.XYZ_to_sRGB(x, C)
                print(rgb)
                rgb = rgb *255
                rgb = [round(x) for x in rgb]
                value = ", ".join(str(e) for e in rgb)


                
                print(value)
                layer.changeAttributeValue(feature.id(),5, value)

        layer.commitChanges() 

            





        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.
        source = self.parameterAsSource(parameters, self.INPUT, context)
        (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
                context, source.fields(), source.wkbType(), source.sourceCrs())

        # Compute the number of steps to display within the progress bar and
        # get features from source
        total = 100.0 / source.featureCount() if source.featureCount() else 0
        features = source.getFeatures()

        for current, feature in enumerate(features):
            # Stop the algorithm if cancel button has been clicked
            if feedback.isCanceled():
                break

            # Add a feature in the sink
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

            # Update the progress bar
            feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.
        """
        return {}
        

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Munsell to RGB'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return RtMunsellRgbAlgorithm()
